{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\App.svelte",
    "..\\..\\Box.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import Grid from \"./Grid.svelte\";\n  import { setClickType, entry, exit, setEntry, setExit } from \"./stores.js\";\n\n  let rows = 6;\n  let cols = 6;\n  $: colors = (function() {\n    let colors = new Array(rows);\n    for (let i = 0; i < rows; i++) colors[i] = new Array(cols);\n    return colors;\n  })();\n\n  $: if (window.innerHeight - 300 < 26 * rows) {\n    rows = Math.floor((window.innerHeight - 300) / 26 - 1);\n  }\n  $: if (window.innerWidth < 32 * cols) {\n    cols = Math.floor((window.innerWidth - 30) / 30 - 1);\n  }\n\n  function startBFS() {\n    if (!entry || !exit) return;\n\n    let bfsSearchInProgress = true;\n    var [visited, parents] = initializeVisitsAndParents();\n\n    var queue = [];\n    var entryX = +entry.split(\"-\")[0];\n    var entryY = +entry.split(\"-\")[1];\n    var exitX = +exit.split(\"-\")[0];\n    var exitY = +exit.split(\"-\")[1];\n\n    queue.push(entryX + \"-\" + entryY);\n    visited[entryX][entryY] = true;\n\n    var stop = false;\n    var delay = 0;\n    while (queue.length && !stop) {\n      var length = queue.length;\n\n      var loopQueue = [];\n      for (let k = 0; k < length; k++) {\n        let value = queue.shift();\n\n        let i = +value.split(\"-\")[0];\n        let j = +value.split(\"-\")[1];\n\n        if (i === exitX && j === exitY) {\n          stop = true;\n          break;\n        }\n\n        if (i + 1 < rows && !visited[i + 1][j] && colors[i + 1][j] !== \"red\") {\n          queue.push(i + 1 + \"-\" + j);\n          parents[i + 1][j] = i + \"-\" + j;\n          visited[i + 1][j] = true;\n        }\n        if (i - 1 > -1 && !visited[i - 1][j] && colors[i - 1][j] !== \"red\") {\n          queue.push(i - 1 + \"-\" + j);\n          parents[i - 1][j] = i + \"-\" + j;\n          visited[i - 1][j] = true;\n        }\n        if (j + 1 < cols && !visited[i][j + 1] && colors[i][j + 1] !== \"red\") {\n          queue.push(i + \"-\" + (j + 1));\n          parents[i][j + 1] = i + \"-\" + j;\n          visited[i][j + 1] = true;\n        }\n        if (j - 1 > -1 && !visited[i][j - 1] && colors[i][j - 1] !== \"red\") {\n          queue.push(i + \"-\" + (j - 1));\n          parents[i][j - 1] = i + \"-\" + j;\n          visited[i][j - 1] = true;\n        }\n\n        loopQueue.push(i + \"-\" + j);\n      }\n\n      let colorQueue = [...loopQueue];\n      setTimeout(() => {\n        colorQueue.forEach(box => {\n          if (!(+box.split(\"-\")[0] === entryX && +box.split(\"-\")[1] === entryY))\n            colors[+box.split(\"-\")[0]][+box.split(\"-\")[1]] = \"darkgray\";\n        });\n\n        colors = colors;\n      }, 200 * delay);\n\n      delay++;\n    }\n\n    setTimeout(() => {\n      if (stop) {\n        let x = exitX,\n          y = exitY;\n        let pathDelay = 0;\n        [x, y] = [+parents[x][y].split(\"-\")[0], +parents[x][y].split(\"-\")[1]];\n        if (entryX === x && entryY === y) return;\n        do {\n          let m = x,\n            n = y;\n          setTimeout(() => {\n            colors[m][n] = \"yellow\";\n            colors = colors;\n          }, pathDelay++ * 100);\n          [x, y] = [+parents[x][y].split(\"-\")[0], +parents[x][y].split(\"-\")[1]];\n        } while (entryX !== x || entryY !== y);\n      }\n    }, 200 * delay);\n  }\n\n  function initializeVisitsAndParents() {\n    var visited = new Array(rows);\n    for (let i = 0; i < rows; i++) visited[i] = new Array(cols);\n\n    var parents = new Array(rows);\n    for (let i = 0; i < rows; i++) parents[i] = new Array(cols);\n\n    return [visited, parents];\n  }\n\n  function randomMazeGenerator() {\n    var mazeColors = new Array(rows);\n    for (let i = 0; i < rows; i++) mazeColors[i] = new Array(cols);\n\n    var x, y;\n    x = Math.floor(Math.random() * rows);\n    y = Math.floor(Math.random() * cols);\n    mazeColors[x][y] = \"blue\";\n\n    var a, b;\n    do {\n      a = Math.floor(Math.random() * rows);\n      b = Math.floor(Math.random() * cols);\n    } while (a === x && y === b);\n    mazeColors[a][b] = \"green\";\n\n    for (let i = 0; i < rows; i++)\n      for (let j = 0; j < cols; j++)\n        if (!mazeColors[i][j]) {\n          if (Math.floor(Math.random() * 10) < 3) mazeColors[i][j] = \"red\";\n          else mazeColors[i][j] = \"white\";\n        }\n\n    setEntry(x + \"-\" + y);\n    setExit(a + \"-\" + b);\n    colors = mazeColors;\n  }\n\n  function reset() {\n    var mazeColors = [];\n    for (let i = 0; i < rows; i++) {\n      let colors = [];\n      for (let j = 0; j < cols; j++) colors.push(\"\");\n      mazeColors.push(colors);\n    }\n\n    setEntry(\"\");\n    setExit(\"\");\n    colors = mazeColors;\n  }\n</script>\n\n<style>\n  main {\n    text-align: center;\n    margin: 0 auto;\n  }\n\n  h2 {\n    margin-top: 0px;\n  }\n\n  .start {\n    background-color: aqua;\n  }\n  \n  button{\n    border:1px solid black;\n    border-radius: 5px;\n    box-shadow: 2px 2px 6px 1px grey;\n  }\n</style>\n\n<main>\n  <h2>Shortest Path Finder</h2>\n  Rows (6 to 30):\n  <input type=\"range\" bind:value={rows} min=\"6\" max=\"30\" />\n  <br />\n  Columns (6 to 60):\n  <input type=\"range\" bind:value={cols} min=\"6\" max=\"60\" />\n\n  <Grid {colors} />\n\n  <button on:click={startBFS} class=\"start\">Start BFS</button>\n  <br />\n  <button on:click={randomMazeGenerator}>Generate Random Maze</button>\n  <button on:click={reset}>Reset</button>\n  <br />\n\n  <button\n    on:click={() => {\n      setClickType('entry');\n    }}>\n    Place Entry\n  </button>\n  <button\n    on:click={() => {\n      setClickType('exit');\n    }}>\n    Place Exit\n  </button>\n  <button\n    on:click={() => {\n      setClickType('wall');\n    }}>\n    Place Wall\n  </button>\n  <button\n    on:click={() => {\n      setClickType('clear');\n    }}>\n    Clear Cell\n  </button>\n\n</main>\n",
    "<script>\r\n  import { clickType, entry, exit, setEntry, setExit } from \"./stores.js\";\r\n  export let x, y, colors, color;\r\n\r\n  function handleClick() {\r\n    if (clickType === \"wall\") {\r\n      colors[x][y] = \"red\";\r\n      this.style.backgroundColor = \"red\";\r\n    } else if (clickType === \"entry\") {\r\n      if (entry !== \"\") {\r\n        colors[entry.split(\"-\")[0]][entry.split(\"-\")[1]] = \"\";\r\n        document.getElementById(\r\n          entry.split(\"-\")[0] + \"-\" + entry.split(\"-\")[1]\r\n        ).style.backgroundColor = \"\";\r\n      }\r\n      colors[x][y] = \"blue\";\r\n      setEntry(x + \"-\" + y);\r\n      this.style.backgroundColor = \"blue\";\r\n    } else if (clickType === \"exit\") {\r\n      if (exit !== \"\") {\r\n        colors[exit.split(\"-\")[0]][exit.split(\"-\")[1]] = \"\";\r\n        document.getElementById(\r\n          exit.split(\"-\")[0] + \"-\" + exit.split(\"-\")[1]\r\n        ).style.backgroundColor = \"\";\r\n      }\r\n      colors[x][y] = \"green\";\r\n      setExit(x + \"-\" + y);\r\n      this.style.backgroundColor = \"green\";\r\n    } else {\r\n      colors[x][y] = \"\";\r\n      this.style.backgroundColor = \"\";\r\n    }\r\n  }\r\n</script>\r\n\r\n<style>\r\n  .box {\r\n    width: 20px;\r\n    height: 20px;\r\n    border: 1px solid black;\r\n    display: inline-block;\r\n    margin: 0px 2px;\r\n  }\r\n</style>\r\n\r\n<div\r\n  class=\"box\"\r\n  on:click={handleClick}\r\n  id={x + '-' + y}\r\n  style=\"background-color:{color}\" />\r\n"
  ],
  "names": [],
  "mappings": "AAiKE,IAAI,eAAC,CAAC,AACJ,UAAU,CAAE,MAAM,CAClB,MAAM,CAAE,CAAC,CAAC,IAAI,AAChB,CAAC,AAED,EAAE,eAAC,CAAC,AACF,UAAU,CAAE,GAAG,AACjB,CAAC,AAED,MAAM,eAAC,CAAC,AACN,gBAAgB,CAAE,IAAI,AACxB,CAAC,AAED,qBAAM,CAAC,AACL,OAAO,GAAG,CAAC,KAAK,CAAC,KAAK,CACtB,aAAa,CAAE,GAAG,CAClB,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,AAClC,CAAC;AC9ID,IAAI,eAAC,CAAC,AACJ,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CACvB,OAAO,CAAE,YAAY,CACrB,MAAM,CAAE,GAAG,CAAC,GAAG,AACjB,CAAC"
}